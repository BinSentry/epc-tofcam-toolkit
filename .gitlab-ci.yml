image: python:3.11

cache:
  paths:
    - .cache/pip
    - .venv/
    - .mypy_cache/

before_script:
  - python3 --version ; python3 -m pip --version  # For debugging
  - python3 -m pip install virtualenv
  - if [ ! -d ".venv" ]; then python3 -m venv .venv; fi # only create a new venv if there is none
  - source .venv/bin/activate
  - pip install --upgrade pip
  - pip install -r requirements.txt

stages:
  - build
  - test
  - deploy

code-analysis:
  stage: test
  tags:
    - docker-tag1
  allow_failure: true
  script:
    - pip install mypy mypy-gitlab-code-quality
    - mypy src/epc/tofCam_lib src/epc/tofCam_gui --no-error-summary > mypy-out.txt
  after_script:
    - echo "Collecting mypy results:"
    - cat mypy-out.txt
    - mypy-gitlab-code-quality < mypy-out.txt > codequality.json
  artifacts:
    reports:
      codequality: codequality.json

build-job:
  stage: build
  script:
    # build number is added to the version number if it is not a tag
    - if [ -z "$CI_COMMIT_TAG" ]; echo "__version__ = '$(python setup.py --version)-${CI_PIPELINE_IID}'" > src/epc/_version.py; fi
    - python -m build --sdist --wheel .
  artifacts:
    paths:
      - dist/*
  tags:
    - docker-tag1

test-job:
  stage: test
  script:
    - pip install . 
    - pytest -m "not systemTest" --cov=src --cov-report term --cov-report xml:coverage.xml --junitxml=test_report.xml
  coverage: '/TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      junit: test_report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  tags:
    - docker-tag1

deploy-test-pypi-job:
  stage: deploy
  script:
    - TWINE_PASSWORD=${CI_TEST_PYPI_TOCKEN} TWINE_USERNAME=espros twine upload --repository testpypi dist/*
  only:
    - master
  tags:
    - docker-tag1

deploy-pypi-job:
  stage: deploy
  script:
    - TWINE_PASSWORD=${CI_PYPI_TOCKEN} TWINE_USERNAME=espros twine upload dist/*
  only:
    - tags
  tags:
    - docker-tag1